Journey of a (Digital) Space Traveler

So I always wanted to code, to relive the glory of university days when Java was at my fingertips and I stumbled blindly between inheritance and classes to make something that someone else said to make.  Of course, back then, I never got the whole picture.  Back then it was just a puzzle.  It was just a set of challenges for me to complete.  And I needed to complete them to pass the class.  That is my skill.  
Now, I need to make money.  And it seems like digital applications are the money making type.  So I brought my desktop from the studio.  An old, 2014 made, Dell Optiplex with 4GB RAM and a 64-bit 4-core, 1 socket Intel i5.  I remember my old trusty machine started failing and I ignored it.  Then it failed hard so I had to go out and buy this as a quick replacement; a replacement that I never ended up using at all.  Until now.
So here I am, sitting in a barely furnished house, in a watch and Next pants.  Grey Havaiana’s under my toes and a t-shirt hanging on the backrest of the dining chair I’m sitting on.  My mom’s chair, from her dining table, the white one that was in the guest hall.  We never used it.  Nobody ever used it.  It was for guests only.  And family aren’t guests.  
Remind me to tell you about the cardboard box desk at a later time.  I want to tell you about Node.js

In the time that I decided to “code for money”, I looked at several web application programming languages.  Ruby was one that I set my eyes on for a while.  But now I’m set on JavaScript.  And obviously, this is due to a Reddit post that I read at some point that said JavaScript is the best language for cross platform programming…  So I’m here, I had the shitty Windows 8.1 installed by default on the machine.  So I downloaded a cracked version of Windows 10 Pro.  At the installation screen you can select the option to enter your own Windows key or just use the one pre-programmed into the installation.  Then I also got Ubuntu desktop 64-bit, and came across Ubuntu Studio, which is a god send.  I have all these audio/video/digital content creation/editing ideas that I need to execute and everything comes pre-installed.  Wow. Every Operating System is on a flash stick as a bootable ISO.  Amazing.  I’m proud of myself.  So I install Windows 10, install Office, and learn how to get rid of some bloatware using PowerShell.  Then I format.  And I install Ubuntu Studio.  It’s amazing.  I couldn’t remember which went on first, but I believed that Linux should always be first because it sets the MBR.  If I did it the other way around Windows would be too dumb to figure out that it has another OS on the same HD. 
Then the partition table wouldn’t partition enough for what I had in mind.  First I set the /boot with 500MB of space, then SWAP as twice the RAM so at 8GB, then / is where everything else went at 42GB.  Then when Windows came, I needed a C: and a D: drive, but I couldn’t partition enough.  What. Why. It makes sense, but why is it happening to me now.  This will be the second night in a row that I stay up until after midnight getting experienced.
Ok, so Windows goes first.  C: and D: drives, done.  Ubuntu installation asks if I want to make my own partition table or install the OS alongside Windows.  Whatever, I’m no wiz kid.  Install it alongside Windows.  You seem like you know what you are doing.  I mean, the first Linux installation I did was purely command line, and I even had to set up the NTP myself.  Now it’s so bling-y.  Go ahead; do it.
Wow. C: and D: drives are mounted and available on the desktop.  Wow.  God damn Linux.  You’ve come a long way.  
Right, so both operating systems are installed, bloatware taken care of, fiddled with Inkscape and happy to know I’ve got a 3D modeling application that I’ll be drawing up my house in. Yes.  Yes, I will… Sure.
There is no internet on the Linux because I’m using a Huawei made MyFi that Autoruns an .exe file.  No worries.  So I’ll just use that to draw up the content but most of the development can happen on Windows.  After all, I can access the content from the mounted drives.  Super cool.

Ok, Windows.  JavaScript.  Eclipse? Yes.  Oh wait.  Java and JavaScript are not progressions of each other? Oh ok, didn’t know that.  JavaScript has a C syntax.  Ok no worries.  You can code JavaScript on HTML websites and on the server, using Node.js.  Heard about it, excited to do it. Eclipse has an installer.  Installer has many Eclipse options: Java, Java EE, JS for web development; bingo! Where do I start now that it is installed? Tutorial.  Great.  I learn about the C-based syntax.  I learn that JS in an HTML <body> will execute when a page loads; and JS in an HTML <head> will execute when a function in the <body> calls it.  Amazing.  I’m on a good start.  Let’s follow the damn thing.  Ok, so put a <script> in the body, load up the browser and tada. Yes! Ok put it in the header and refresh, and yes, it works as well.  Accomplishment.  Achievement.  Ahmed.  Yes.  Amazing.  The tutorial is using Digg as an example.  Damn, that’s old.
Moving on to a different section, “Modern JavaScript”.  I need Node.js for server side work, and I need package managers; Bower for front-end, npm for Node modules.  How do I integrate Node.js into Eclipse? Google google… everything is on a dedicated software center nowadays anyway.  So I fire up the Eclipse software center and yes, there is something called Nodeclipse, which seems like a community driven endeavor.  Good stuff.  Let’s install.  Seems to include Node and bower and everything.  Amazing.  Ok, let me get the .msi for Node.js from their webpage but I know I won’t use it.  Nope, after running through a little more of the tutorial seems like Eclipse has the software installed for its own sake, but it is not integrated into the operating system.  Fine, so I install the Node executable and it comes with npm, which I can use to install Bower; from the command line, which is always awesome by the way.  And now I am here, all caught up.
Well, sort of.  Bower runs from the command line terminal, but Eclipse doesn’t reference it.  Restarting Eclipse now and going to get a coffee…
One hand held Bodum French press later, and both Bower and Git are installed on my machine.  Let’s test out integration with github using the Git GUI.  Pasting this into a txt file and committing it to my repository.


 
